#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const WebSocket = require("ws");
const { exec } = require("child_process");
// const worker = require("worker_threads");
const {
  Worker,
  isMainThread,
  parentPort,
  workerData,
} = require("worker_threads");
const generic = require("./generic");
const responseHandlers = {};
/**
 * Get port from environment and store in Express.
 */

const [port, port2] = [
  process.env.PORT || "4001",
  parseInt(process.env.PORT) + 1 || "4002",
].map(normalizePort);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * set ports
 */

app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Create WSS server.
 */

let webSock = null;
var wss = new WebSocket.Server({
  port: port2,
});
wss.on("connection", (ws) => {
  let timestamp = +new Date();
  console.log(`ws connection is established: ${timestamp}`);
  ws.send(`ws connection is established: ${timestamp}`);

  wss.on("message", (data) => {
    console.log(`ws message received: ${data}`);
    wss.clients.map((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(data);
      }
    });
  });
});

// When the server runs behind a proxy like NGINX,
// the de-facto standard is to use the "X-Forwarded-For" header.

wss.on("connection", function connection(ws, req) {
  const ip = req.headers["x-forwarded-for"]?.split(/\s*,\s*/)[0];
});

wss.on("close", function close() {
  console.log("disconnected");
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);

  wss.on("connection", (ws) => {
    let timestamp = +new Date();
    console.log(`REFRESH_NOW: ${timestamp}`);
    // ws.send(`REFRESH_NOW: ${timestamp}`);
    ws.send(`REFRESH_NOWXXX`);
  });

  // exec(`google-chrome "http://localhost:${addr.port}"`, generic);

  // exec(
  //   `sh ./relaunch.sh google-chrome "http://localhost:${addr.port}"`,
  //   generic
  // );
}
